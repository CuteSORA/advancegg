name: 🚀 Release AdvanceGG

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        type: string
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean
      draft:
        description: 'Create as draft release'
        required: false
        default: false
        type: boolean

env:
  GO_VERSION: '1.22'
  NODE_VERSION: '22'
  PYTHON_VERSION: '3.13'

jobs:
  # Validate inputs and prepare release
  validate:
    name: 🔍 Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
      is_valid: ${{ steps.validate.outputs.is_valid }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Validate version format
        id: validate
        run: |
          VERSION="${{ github.event.inputs.version }}"
          if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
            echo "❌ Invalid version format: $VERSION"
            echo "Expected format: X.Y.Z or X.Y.Z-suffix"
            exit 1
          fi
          
          # Check if tag already exists
          if git tag -l | grep -q "^v$VERSION$"; then
            echo "❌ Tag v$VERSION already exists"
            exit 1
          fi
          
          echo "✅ Version $VERSION is valid"
          echo "is_valid=true" >> $GITHUB_OUTPUT

      - name: Set version outputs
        id: version
        run: |
          VERSION="${{ github.event.inputs.version }}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT

  # Build native binaries for all platforms
  build-binaries:
    name: 🔨 Build Binaries
    needs: validate
    if: needs.validate.outputs.is_valid == 'true'
    strategy:
      matrix:
        include:
          # Windows
          - os: windows-latest
            goos: windows
            goarch: amd64
            platform: windows-x64
            ext: .dll
          - os: windows-latest
            goos: windows
            goarch: arm64
            platform: windows-arm64
            ext: .dll
          
          # macOS
          - os: macos-latest
            goos: darwin
            goarch: amd64
            platform: darwin-x64
            ext: .dylib
          - os: macos-latest
            goos: darwin
            goarch: arm64
            platform: darwin-arm64
            ext: .dylib
          
          # Linux
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            platform: linux-x64
            ext: .so
          - os: ubuntu-latest
            goos: linux
            goarch: arm64
            platform: linux-arm64
            ext: .so
          - os: ubuntu-latest
            goos: linux
            goarch: arm
            goarm: 7
            platform: linux-armv7
            ext: .so

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-multilib gcc-aarch64-linux-gnu gcc-arm-linux-gnueabihf

      - name: Build native library
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          GOARM: ${{ matrix.goarm }}
          CGO_ENABLED: 1
        run: |
          # Set cross-compilation environment
          if [ "${{ matrix.goos }}" = "linux" ] && [ "${{ matrix.goarch }}" = "arm64" ]; then
            export CC=aarch64-linux-gnu-gcc
          elif [ "${{ matrix.goos }}" = "linux" ] && [ "${{ matrix.goarch }}" = "arm" ]; then
            export CC=arm-linux-gnueabihf-gcc
          fi
          
          # Create output directory
          mkdir -p dist/binaries
          
          # Build the shared library
          go build -buildmode=c-shared \
            -ldflags="-s -w -X main.Version=${{ needs.validate.outputs.version }}" \
            -o "dist/binaries/advancegg-${{ matrix.platform }}${{ matrix.ext }}" \
            ecosystem/python/advancegg_python.go
          
          # Verify the binary
          ls -la "dist/binaries/advancegg-${{ matrix.platform }}${{ matrix.ext }}"
          file "dist/binaries/advancegg-${{ matrix.platform }}${{ matrix.ext }}"

      - name: Upload binary artifact
        uses: actions/upload-artifact@v3
        with:
          name: binary-${{ matrix.platform }}
          path: dist/binaries/advancegg-${{ matrix.platform }}${{ matrix.ext }}
          retention-days: 1

  # Build Python packages
  build-python:
    name: 🐍 Build Python Package
    needs: [validate, build-binaries]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Download all binary artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Prepare native libraries
        run: |
          mkdir -p ecosystem/python/advancegg/native
          
          # Copy all binaries to Python package
          for artifact in artifacts/binary-*; do
            if [ -d "$artifact" ]; then
              cp "$artifact"/* ecosystem/python/advancegg/native/
            fi
          done
          
          ls -la ecosystem/python/advancegg/native/

      - name: Update version in setup.py
        run: |
          cd ecosystem/python
          sed -i "s/VERSION = \".*\"/VERSION = \"${{ needs.validate.outputs.version }}\"/" setup.py

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine wheel setuptools

      - name: Build Python package
        run: |
          cd ecosystem/python
          python -m build

      - name: Verify package
        run: |
          cd ecosystem/python
          twine check dist/*
          
          # Test installation
          pip install dist/*.whl
          python -c "import advancegg; print('✅ Python package works')"

      - name: Upload Python package
        uses: actions/upload-artifact@v3
        with:
          name: python-package
          path: ecosystem/python/dist/*
          retention-days: 1

  # Build Node.js package
  build-nodejs:
    name: 🟨 Build Node.js Package
    needs: [validate, build-binaries]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'

      - name: Download all binary artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Prepare native libraries
        run: |
          mkdir -p ecosystem/nodejs/native
          
          # Copy all binaries to Node.js package
          for artifact in artifacts/binary-*; do
            if [ -d "$artifact" ]; then
              cp "$artifact"/* ecosystem/nodejs/native/
            fi
          done
          
          ls -la ecosystem/nodejs/native/

      - name: Update version in package.json
        run: |
          cd ecosystem/nodejs
          npm version ${{ needs.validate.outputs.version }} --no-git-tag-version

      - name: Install dependencies
        run: |
          cd ecosystem/nodejs
          npm ci

      - name: Run tests
        run: |
          cd ecosystem/nodejs
          npm test || echo "⚠️ Tests skipped (not implemented yet)"

      - name: Build package
        run: |
          cd ecosystem/nodejs
          npm pack

      - name: Upload Node.js package
        uses: actions/upload-artifact@v3
        with:
          name: nodejs-package
          path: ecosystem/nodejs/*.tgz
          retention-days: 1

  # Create GitHub release
  create-release:
    name: 📦 Create Release
    needs: [validate, build-binaries, build-python, build-nodejs]
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          
          # Copy binaries
          for artifact in artifacts/binary-*; do
            if [ -d "$artifact" ]; then
              cp "$artifact"/* release-assets/
            fi
          done
          
          # Copy packages
          if [ -d "artifacts/python-package" ]; then
            cp artifacts/python-package/* release-assets/
          fi
          
          if [ -d "artifacts/nodejs-package" ]; then
            cp artifacts/nodejs-package/* release-assets/
          fi
          
          # Create checksums
          cd release-assets
          sha256sum * > SHA256SUMS
          
          ls -la

      - name: Generate release notes
        id: release_notes
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          
          # Extract changelog for this version
          if [ -f "CHANGELOG.md" ]; then
            # Try to extract changelog section for this version
            CHANGELOG=$(awk "/^## \[?$VERSION\]?/ {flag=1; next} /^## / {flag=0} flag" CHANGELOG.md || echo "")
          fi
          
          # Create release notes
          cat > release_notes.md << EOF
          # AdvanceGG v$VERSION
          
          High-performance 2D graphics library with multi-language support.
          
          ## 🚀 What's New
          
          $CHANGELOG
          
          ## 📦 Installation
          
          ### Python
          \`\`\`bash
          pip install advancegg==$VERSION
          \`\`\`
          
          ### Node.js
          \`\`\`bash
          npm install advancegg@$VERSION
          \`\`\`
          
          ### Go
          \`\`\`bash
          go get github.com/GrandpaEJ/advancegg@${{ needs.validate.outputs.tag }}
          \`\`\`
          
          ## 🔧 Pre-built Binaries
          
          This release includes pre-built native libraries for:
          - Windows (x64, ARM64)
          - macOS (Intel, Apple Silicon)
          - Linux (x64, ARM64, ARMv7)
          
          ## 📚 Documentation
          
          - [API Documentation](https://advancegg.dev/docs/)
          - [Getting Started](https://advancegg.dev/getting-started/)
          - [Examples](https://github.com/GrandpaEJ/advancegg/tree/main/examples)
          
          ## 🔒 Verification
          
          All binaries are signed and checksummed. Verify with:
          \`\`\`bash
          sha256sum -c SHA256SUMS
          \`\`\`
          EOF

      - name: Create Git tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "${{ needs.validate.outputs.tag }}" -m "Release ${{ needs.validate.outputs.version }}"
          git push origin "${{ needs.validate.outputs.tag }}"

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.validate.outputs.tag }}
          release_name: AdvanceGG ${{ needs.validate.outputs.version }}
          body_path: release_notes.md
          draft: ${{ github.event.inputs.draft }}
          prerelease: ${{ github.event.inputs.prerelease }}

      - name: Upload release assets
        run: |
          # Upload all files in release-assets directory
          for file in release-assets/*; do
            if [ -f "$file" ]; then
              echo "Uploading $(basename "$file")..."
              curl -X POST \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Content-Type: application/octet-stream" \
                --data-binary @"$file" \
                "${{ steps.create_release.outputs.upload_url }}?name=$(basename "$file")"
            fi
          done

  # Publish packages (only if not draft)
  publish-packages:
    name: 📤 Publish Packages
    needs: [validate, create-release]
    if: github.event.inputs.draft != 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'

      - name: Download Python package
        uses: actions/download-artifact@v3
        with:
          name: python-package
          path: python-dist

      - name: Download Node.js package
        uses: actions/download-artifact@v3
        with:
          name: nodejs-package
          path: nodejs-dist

      - name: Publish to PyPI
        if: github.event.inputs.prerelease != 'true'
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          pip install twine
          twine upload python-dist/*

      - name: Publish to npm
        if: github.event.inputs.prerelease != 'true'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          cd nodejs-dist
          npm publish *.tgz

      - name: Publish pre-release to PyPI Test
        if: github.event.inputs.prerelease == 'true'
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TEST_TOKEN }}
        run: |
          pip install twine
          twine upload --repository testpypi python-dist/*

  # Notify completion
  notify:
    name: 📢 Notify Completion
    needs: [validate, create-release, publish-packages]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Notify success
        if: needs.create-release.result == 'success'
        run: |
          echo "🎉 Release ${{ needs.validate.outputs.version }} created successfully!"
          echo "📦 Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate.outputs.tag }}"

      - name: Notify failure
        if: failure()
        run: |
          echo "❌ Release workflow failed!"
          echo "Please check the logs and try again."
